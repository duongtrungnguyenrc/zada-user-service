// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface CreateUserDto {
  fullName: string;
  email: string;
  avatarUrl?: string | undefined;
  passwordHash: string;
  phoneNumber: string;
}

export interface UpdateUserDto {
  fullName?: string | undefined;
  avatarUrl?: string | undefined;
  passwordHash?: string | undefined;
  phoneNumber?: string | undefined;
  isVerified?: boolean | undefined;
  isActive?: boolean | undefined;
}

export interface UserFilterDto {
  id?: string | undefined;
  email?: string | undefined;
}

export interface UsersFilterDto {
  ids: string[];
}

export interface CreateUserRequest {
  data: CreateUserDto | undefined;
}

export interface UpdateUserRequest {
  filter: UserFilterDto | undefined;
  updates: UpdateUserDto | undefined;
}

export interface GetUserRequest {
  filter: UserFilterDto | undefined;
  select: string[];
}

export interface GetUsersRequest {
  filter: UsersFilterDto | undefined;
  select: string[];
}

export interface UserVM {
  id: string;
  email: string;
  avatarUrl?: string | undefined;
  phoneNumber: string;
  fullName: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  passwordHash: string;
  isActive: boolean;
  isVerified: boolean;
}

export interface UserResponse {
  data?: UserVM | undefined;
}

export interface UsersResponse {
  data: UserVM[];
}

export const USER_PACKAGE_NAME = "user";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface UserServiceClient {
  create(request: CreateUserRequest): Observable<UserResponse>;

  update(request: UpdateUserRequest): Observable<UserResponse>;

  get(request: GetUserRequest): Observable<UserResponse>;

  getUsers(request: GetUsersRequest): Observable<UsersResponse>;
}

export interface UserServiceController {
  create(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  update(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  get(request: GetUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  getUsers(request: GetUsersRequest): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "get", "getUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
